{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion describes the motion of an object launched into the air, influenced only by gravitational acceleration. Let\u2019s derive the fundamental equations governing this motion. Horizontal displacement : $$ x(t) = v_0 \\cos(\\theta)t $$ Vertical displacement : $$ y(t) = v_0 \\sin(\\theta)t - \\frac{1}{2}gt^2 $$ Where: $$ v_0 = \\text{initial velocity} $$ \\[ \\theta = \\text{angle of projection} \\] \\[ g = \\text{gravitational acceleration} \\] \\[ t = \\text{time of flight} \\] The time of flight \\(Tx\\) (when the projectile returns to the same height) is given by: \\[ T = \\frac{2v_0 \\sin(\\theta)}{g} \\] The horizontal range \\(R\\) (total horizontal displacement at \\(y = 0\\) ) is: \\[ R = v_0 \\cos(\\theta) \\times T \\] \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This equation shows that range depends on the square of the initial velocity, the sine of twice the projection angle, and gravitational acceleration. 2. Analysis of the Range The maximum range occurs when \\(\\sin(2\\theta)\\) is maximized, i.e., when \\(2\\theta = 90^\\circ\\) or \\(\\theta = 45^\\circ\\) . Increasing \\(v_0\\) increases the range quadratically. Higher gravitational acceleration \\(g\\) decreases the range. 3. Practical Applications This model is idealized \u2014 in real-world applications, factors like air resistance and uneven terrain alter the projectile\u2019s trajectory. Extensions include: Air resistance: Introduces drag, reducing range and altering the flight path. Uneven terrain: Changes the point where the projectile lands. Wind effects: Modify horizontal velocity. 4. Implementation We can visualize the range as a function of the projection angle using Python. import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 50 # Initial velocity in m/s g = 9.81 # Gravitational acceleration in m/s^2 # Angles in degrees and radians angles = np.linspace(0, 90, 500) theta = np.radians(angles) # Compute range R = (v0**2 * np.sin(2 * theta)) / g # Plot plt.figure(figsize=(8, 6)) plt.plot(angles, R) plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle of Projection') plt.grid(True) plt.show() 5. Discussion Limitations: - No air resistance considered. - Assumes flat terrain. - Assumes constant gravitational acceleration. Extensions: - Incorporate drag force. - Simulate uneven landing surfaces. - Model varying gravitational fields. This analysis demonstrates how varying the angle of projection impacts the range of a projectile, forming a strong basis for exploring more complex real-world motion.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion describes the motion of an object launched into the air, influenced only by gravitational acceleration. Let\u2019s derive the fundamental equations governing this motion. Horizontal displacement : $$ x(t) = v_0 \\cos(\\theta)t $$ Vertical displacement : $$ y(t) = v_0 \\sin(\\theta)t - \\frac{1}{2}gt^2 $$ Where: $$ v_0 = \\text{initial velocity} $$ \\[ \\theta = \\text{angle of projection} \\] \\[ g = \\text{gravitational acceleration} \\] \\[ t = \\text{time of flight} \\] The time of flight \\(Tx\\) (when the projectile returns to the same height) is given by: \\[ T = \\frac{2v_0 \\sin(\\theta)}{g} \\] The horizontal range \\(R\\) (total horizontal displacement at \\(y = 0\\) ) is: \\[ R = v_0 \\cos(\\theta) \\times T \\] \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This equation shows that range depends on the square of the initial velocity, the sine of twice the projection angle, and gravitational acceleration.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The maximum range occurs when \\(\\sin(2\\theta)\\) is maximized, i.e., when \\(2\\theta = 90^\\circ\\) or \\(\\theta = 45^\\circ\\) . Increasing \\(v_0\\) increases the range quadratically. Higher gravitational acceleration \\(g\\) decreases the range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model is idealized \u2014 in real-world applications, factors like air resistance and uneven terrain alter the projectile\u2019s trajectory. Extensions include: Air resistance: Introduces drag, reducing range and altering the flight path. Uneven terrain: Changes the point where the projectile lands. Wind effects: Modify horizontal velocity.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"We can visualize the range as a function of the projection angle using Python. import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 50 # Initial velocity in m/s g = 9.81 # Gravitational acceleration in m/s^2 # Angles in degrees and radians angles = np.linspace(0, 90, 500) theta = np.radians(angles) # Compute range R = (v0**2 * np.sin(2 * theta)) / g # Plot plt.figure(figsize=(8, 6)) plt.plot(angles, R) plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle of Projection') plt.grid(True) plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-discussion","text":"Limitations: - No air resistance considered. - Assumes flat terrain. - Assumes constant gravitational acceleration. Extensions: - Incorporate drag force. - Simulate uneven landing surfaces. - Model varying gravitational fields. This analysis demonstrates how varying the angle of projection impacts the range of a projectile, forming a strong basis for exploring more complex real-world motion.","title":"5. Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is governed by the differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\(\\theta\\) = angular displacement - \\(b\\) = damping coefficient - \\(g\\) = gravitational acceleration - \\(L\\) = length of the pendulum - \\(A\\) = amplitude of the external driving force - \\(\\omega\\) = frequency of the external driving force - \\(t\\) = time For small angles ( \\(\\theta \\approx \\sin\\theta\\) ), the equation simplifies to: \\(\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t)\\) The general solution of this equation involves both homogeneous (natural) and particular (forced) solutions. The system exhibits resonance when the driving frequency \\(\\omega\\) matches the system's natural frequency \\(\\sqrt{g/L}\\) . 2. Analysis of Dynamics Key parameters influencing the system\u2019s behavior: - Damping coefficient (b): Controls energy dissipation; high values lead to overdamping and slow returns to equilibrium, while low values result in underdamping and oscillations. - Driving amplitude (A): Determines the intensity of the external force; larger amplitudes lead to more significant displacement and potential chaotic motion. - Driving frequency ( \\(\\omega\\) ): Controls the rate of external driving; resonance occurs when \\(\\omega \\approx \\sqrt{g/L}\\) . As the parameters change, the system transitions from: - Periodic oscillations: Regular and predictable motion. - Quasiperiodic behavior: Motion with two incommensurate frequencies. - Chaotic motion: Sensitive dependence on initial conditions, leading to unpredictable outcomes. 3. Practical Applications Energy harvesting: Devices capturing mechanical energy from oscillations. Suspension bridges: Avoiding resonance-induced destructive oscillations. Oscillating circuits: Electrical analogs of forced damped pendulums. 4. Implementation We simulate the motion of a forced damped pendulum using Python. import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt # Parameters g, L = 9.81, 1.0 # Gravity and pendulum length b, A, omega = 0.5, 1.2, 2.0 # Differential equation def pendulum(t, y): theta, omega_ = y dydt = [omega_, -b * omega_ - (g / L) * np.sin(theta) + A * np.cos(omega * t)] return dydt # Initial conditions and time span y0 = [0.1, 0.0] t_span = (0, 50) t_eval = np.linspace(*t_span, 1000) # Solve the system sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot results plt.figure(figsize=(8, 6)) plt.plot(sol.t, sol.y[0]) plt.xlabel('Time (s)') plt.ylabel('Angular displacement (rad)') plt.title('Forced Damped Pendulum Motion') plt.grid(True) plt.show() 5. Discussion Limitations: - Assumes small-angle approximation for analytical simplicity. - Ignores air resistance and other real-world frictions. Extensions: - Include nonlinear damping. - Explore non-periodic driving forces. - Visualize phase portraits and Poincar\u00e9 sections. This analysis captures the complexity of a forced damped pendulum, bridging theory and computational exploration to reveal intricate dynamics like resonance and chaos.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is governed by the differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\(\\theta\\) = angular displacement - \\(b\\) = damping coefficient - \\(g\\) = gravitational acceleration - \\(L\\) = length of the pendulum - \\(A\\) = amplitude of the external driving force - \\(\\omega\\) = frequency of the external driving force - \\(t\\) = time For small angles ( \\(\\theta \\approx \\sin\\theta\\) ), the equation simplifies to: \\(\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t)\\) The general solution of this equation involves both homogeneous (natural) and particular (forced) solutions. The system exhibits resonance when the driving frequency \\(\\omega\\) matches the system's natural frequency \\(\\sqrt{g/L}\\) .","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"Key parameters influencing the system\u2019s behavior: - Damping coefficient (b): Controls energy dissipation; high values lead to overdamping and slow returns to equilibrium, while low values result in underdamping and oscillations. - Driving amplitude (A): Determines the intensity of the external force; larger amplitudes lead to more significant displacement and potential chaotic motion. - Driving frequency ( \\(\\omega\\) ): Controls the rate of external driving; resonance occurs when \\(\\omega \\approx \\sqrt{g/L}\\) . As the parameters change, the system transitions from: - Periodic oscillations: Regular and predictable motion. - Quasiperiodic behavior: Motion with two incommensurate frequencies. - Chaotic motion: Sensitive dependence on initial conditions, leading to unpredictable outcomes.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy harvesting: Devices capturing mechanical energy from oscillations. Suspension bridges: Avoiding resonance-induced destructive oscillations. Oscillating circuits: Electrical analogs of forced damped pendulums.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"We simulate the motion of a forced damped pendulum using Python. import numpy as np from scipy.integrate import solve_ivp import matplotlib.pyplot as plt # Parameters g, L = 9.81, 1.0 # Gravity and pendulum length b, A, omega = 0.5, 1.2, 2.0 # Differential equation def pendulum(t, y): theta, omega_ = y dydt = [omega_, -b * omega_ - (g / L) * np.sin(theta) + A * np.cos(omega * t)] return dydt # Initial conditions and time span y0 = [0.1, 0.0] t_span = (0, 50) t_eval = np.linspace(*t_span, 1000) # Solve the system sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval) # Plot results plt.figure(figsize=(8, 6)) plt.plot(sol.t, sol.y[0]) plt.xlabel('Time (s)') plt.ylabel('Angular displacement (rad)') plt.title('Forced Damped Pendulum Motion') plt.grid(True) plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-discussion","text":"Limitations: - Assumes small-angle approximation for analytical simplicity. - Ignores air resistance and other real-world frictions. Extensions: - Include nonlinear damping. - Explore non-periodic driving forces. - Visualize phase portraits and Poincar\u00e9 sections. This analysis captures the complexity of a forced damped pendulum, bridging theory and computational exploration to reveal intricate dynamics like resonance and chaos.","title":"5. Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Certainly! Below is a detailed explanation of Kepler's Third Law, its implications, and a Python implementation to simulate circular orbits and verify the relationship. Kepler's Third Law: Orbital Period and Orbital Radius Derivation of the Relationship Kepler's Third Law states that the square of the orbital period ( \\(T^2\\) ) of a celestial body is proportional to the cube of the semi-major axis ( \\(a^3\\) ) of its orbit. For circular orbits, the semi-major axis is simply the orbital radius ( \\(r\\) ). The law can be derived from Newton's Law of Gravitation and Centripetal Force. Consider a planet of mass \\(m\\) orbiting a star of mass \\(M\\) in a circular orbit of radius \\(r\\) . The gravitational force provides the centripetal force required for circular motion: \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Where: - \\(G\\) is the gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{N} \\cdot \\text{m}^2/\\text{kg}^2\\) ), - \\(v\\) is the orbital velocity of the planet. The orbital velocity \\(v\\) can be expressed in terms of the orbital period \\(T\\) : \\[ v = \\frac{2\\pi r}{T} \\] Substituting \\(v\\) into the equation: \\[ \\frac{GMm}{r^2} = \\frac{m(2\\pi r / T)^2}{r} \\] Simplifying: \\[ \\frac{GM}{r^2} = \\frac{4\\pi^2 r}{T^2} \\] Rearranging to solve for \\(T^2\\) : \\[ ^2 = \\frac{4\\pi^2 r^3}{GM} \\] This shows that: \\[ T^2 \\propto r^3 \\] This is Kepler's Third Law. Implications for Astronomy Calculating Planetary Masses : By observing the orbital period and radius of a moon or satellite, astronomers can calculate the mass of the planet it orbits. Determining Distances : The law helps determine the distances between celestial bodies in a system. Understanding Gravitational Interactions : It provides insights into the gravitational forces governing planetary systems, binary stars, and galaxies. Real-World Examples Moon's Orbit Around Earth : Orbital radius ( \\(r\\) ): ~384,400 km Orbital period ( \\(T\\) ): ~27.3 days Using Kepler's Third Law, we can verify the relationship. Planets in the Solar System : For example, Earth's orbital radius is ~1 AU (astronomical unit), and its orbital period is ~1 year. Kepler's Third Law holds true for all planets. Python Implementation Below is a Python script to simulate circular orbits and verify Kepler's Third Law. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (N m^2/kg^2) M = 5.972e24 # Mass of Earth (kg) # Function to calculate orbital period def orbital_period(r): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Orbital radii (in meters) radii = np.linspace(6.371e6, 4e8, 100) # From Earth's surface to beyond the Moon's orbit # Calculate orbital periods periods = orbital_period(radii) # Plot T^2 vs r^3 plt.figure(figsize=(10, 6)) plt.plot(radii**3, periods**2, label=\"T\u00b2 vs r\u00b3\") plt.xlabel(\"Orbital Radius\u00b3 (r\u00b3) [m\u00b3]\") plt.ylabel(\"Orbital Period\u00b2 (T\u00b2) [s\u00b2]\") plt.title(\"Kepler's Third Law: T\u00b2 \u221d r\u00b3\") plt.grid() plt.legend() plt.show() # Example: Moon's orbit moon_radius = 3.844e8 # Moon's orbital radius (m) moon_period = orbital_period(moon_radius) print(f\"Calculated orbital period for the Moon: {moon_period / (24 * 3600):.2f} days\") Graphical Representation The plot generated by the script will show a linear relationship between \\(T^2\\) and \\(r^3\\) , confirming Kepler's Third Law. Extension to Elliptical Orbits For elliptical orbits, Kepler's Third Law still holds, but the semi-major axis ( \\(a\\) ) replaces the orbital radius ( \\(r\\) ): \\[ T^2 = \\frac{4\\pi^2 a^3}{GM} \\] This generalization allows the law to apply to all types of orbits, including highly elliptical ones. Deliverables Markdown Document : This document serves as the explanation and implementation. Python Script : The script provided simulates circular orbits and verifies Kepler's Third Law. Graphical Representation : The plot confirms the \\(T^2 \\propto r^3\\) relationship. Discussion : The relationship extends to elliptical orbits and other celestial bodies, making it a universal tool in astronomy. Let me know if you need further clarification or enhancements!","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"Certainly! Below is a detailed explanation of Kepler's Third Law, its implications, and a Python implementation to simulate circular orbits and verify the relationship.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-orbital-period-and-orbital-radius","text":"","title":"Kepler's Third Law: Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-the-relationship","text":"Kepler's Third Law states that the square of the orbital period ( \\(T^2\\) ) of a celestial body is proportional to the cube of the semi-major axis ( \\(a^3\\) ) of its orbit. For circular orbits, the semi-major axis is simply the orbital radius ( \\(r\\) ). The law can be derived from Newton's Law of Gravitation and Centripetal Force. Consider a planet of mass \\(m\\) orbiting a star of mass \\(M\\) in a circular orbit of radius \\(r\\) . The gravitational force provides the centripetal force required for circular motion: \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Where: - \\(G\\) is the gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{N} \\cdot \\text{m}^2/\\text{kg}^2\\) ), - \\(v\\) is the orbital velocity of the planet. The orbital velocity \\(v\\) can be expressed in terms of the orbital period \\(T\\) : \\[ v = \\frac{2\\pi r}{T} \\] Substituting \\(v\\) into the equation: \\[ \\frac{GMm}{r^2} = \\frac{m(2\\pi r / T)^2}{r} \\] Simplifying: \\[ \\frac{GM}{r^2} = \\frac{4\\pi^2 r}{T^2} \\] Rearranging to solve for \\(T^2\\) : \\[ ^2 = \\frac{4\\pi^2 r^3}{GM} \\] This shows that: \\[ T^2 \\propto r^3 \\] This is Kepler's Third Law.","title":"Derivation of the Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications-for-astronomy","text":"Calculating Planetary Masses : By observing the orbital period and radius of a moon or satellite, astronomers can calculate the mass of the planet it orbits. Determining Distances : The law helps determine the distances between celestial bodies in a system. Understanding Gravitational Interactions : It provides insights into the gravitational forces governing planetary systems, binary stars, and galaxies.","title":"Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-examples","text":"Moon's Orbit Around Earth : Orbital radius ( \\(r\\) ): ~384,400 km Orbital period ( \\(T\\) ): ~27.3 days Using Kepler's Third Law, we can verify the relationship. Planets in the Solar System : For example, Earth's orbital radius is ~1 AU (astronomical unit), and its orbital period is ~1 year. Kepler's Third Law holds true for all planets.","title":"Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-implementation","text":"Below is a Python script to simulate circular orbits and verify Kepler's Third Law. import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (N m^2/kg^2) M = 5.972e24 # Mass of Earth (kg) # Function to calculate orbital period def orbital_period(r): return np.sqrt((4 * np.pi**2 * r**3) / (G * M)) # Orbital radii (in meters) radii = np.linspace(6.371e6, 4e8, 100) # From Earth's surface to beyond the Moon's orbit # Calculate orbital periods periods = orbital_period(radii) # Plot T^2 vs r^3 plt.figure(figsize=(10, 6)) plt.plot(radii**3, periods**2, label=\"T\u00b2 vs r\u00b3\") plt.xlabel(\"Orbital Radius\u00b3 (r\u00b3) [m\u00b3]\") plt.ylabel(\"Orbital Period\u00b2 (T\u00b2) [s\u00b2]\") plt.title(\"Kepler's Third Law: T\u00b2 \u221d r\u00b3\") plt.grid() plt.legend() plt.show() # Example: Moon's orbit moon_radius = 3.844e8 # Moon's orbital radius (m) moon_period = orbital_period(moon_radius) print(f\"Calculated orbital period for the Moon: {moon_period / (24 * 3600):.2f} days\")","title":"Python Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graphical-representation","text":"The plot generated by the script will show a linear relationship between \\(T^2\\) and \\(r^3\\) , confirming Kepler's Third Law.","title":"Graphical Representation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extension-to-elliptical-orbits","text":"For elliptical orbits, Kepler's Third Law still holds, but the semi-major axis ( \\(a\\) ) replaces the orbital radius ( \\(r\\) ): \\[ T^2 = \\frac{4\\pi^2 a^3}{GM} \\] This generalization allows the law to apply to all types of orbits, including highly elliptical ones.","title":"Extension to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#deliverables","text":"Markdown Document : This document serves as the explanation and implementation. Python Script : The script provided simulates circular orbits and verifies Kepler's Third Law. Graphical Representation : The plot confirms the \\(T^2 \\propto r^3\\) relationship. Discussion : The relationship extends to elliptical orbits and other celestial bodies, making it a universal tool in astronomy. Let me know if you need further clarification or enhancements!","title":"Deliverables"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}